# Day 15

## Section

```elixir
defmodule Day15 do
  def part1(input) do
    y = 2_000_000

    sensors = Enum.filter(input, &match?({_, {:sensor, _}}, &1))

    ranges = ranges_at_y(sensors, y)

    covered =
      ranges
      |> Enum.map(fn s..e ->
        e - s + 1
      end)
      |> Enum.sum()

    beacons =
      Enum.count(input, fn {{_, yb}, type} ->
        type == :beacon and yb == y
      end)

    covered - beacons
  end

  def part2(input) do
    sensors = Enum.filter(input, &match?({_, {:sensor, _}}, &1))

    {y, ranges} =
      0..4_000_000
      |> Stream.map(&{&1, ranges_at_y(sensors, &1)})
      |> Enum.find(&match?({_, [_, _]}, &1))

    [_..x1, x2.._] = Enum.sort(ranges)

    # This statement is an assertion
    2 = x2 - x1

    div(x1 + x2, 2) * 4_000_000 + y
  end

  defp ranges_at_y(sensors, y) do
    sensors
    |> Stream.reject(fn {{_xc, yc}, {:sensor, radius}} ->
      abs(y - yc) > radius
    end)
    |> Stream.map(fn {{xc, yc}, {:sensor, radius}} ->
      (xc - (radius - abs(y - yc)))..(xc + (radius - abs(y - yc)))
    end)
    |> merge_ranges()
  end

  defp merge_ranges(ranges) do
    [h | t] = Enum.sort(ranges)
    do_merge_ranges(t, [h])
  end

  defp do_merge_ranges([s2..e2 = r2 | t2], [s1..e1 = r1 | t1] = acc) do
    if Range.disjoint?(r1, r2) do
      do_merge_ranges(t2, [r2 | acc])
    else
      do_merge_ranges(t2, [s1..max(e1, e2) | t1])
    end
  end

  defp do_merge_ranges([], acc), do: acc

  def parse_input(path) do
    path
    |> File.stream!()
    |> Enum.flat_map(&parse_line/1)
    |> Map.new()
  end

  defp parse_line(line) do
    ~r/(?<=[xy]=)[^,:\s]+/
    |> Regex.scan(line)
    |> List.flatten()
    |> Enum.map(&String.to_integer/1)
    |> then(fn [xs, ys, xb, yb] ->
      [{{xs, ys}, {:sensor, manhattan({xs, ys}, {xb, yb})}}, {{xb, yb}, :beacon}]
    end)
  end

  defp manhattan({x1, y1}, {x2, y2}) do
    abs(x1 - x2) + abs(y1 - y2)
  end
end
```

```elixir
input = Day15.parse_input("#{__DIR__}/day15.txt")
```

```elixir
Day15.part1(input)
```

```elixir
Day15.part2(input)
```
