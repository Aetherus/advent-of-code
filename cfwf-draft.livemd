# CFWF Draft

```elixir
Mix.install([
  {:tzdata, "~> 1.1"}
])
```

## Section

```elixir
defmodule Cfwf.Account do
  defstruct [:id]

  @type id() :: String.t()
  
  @type t() :: %__MODULE__{
    id: id()
  }
end
```

```elixir
defmodule Cfwf.Embed do
  defstruct [:code, :ui]

  @type t() :: %__MODULE__{
    code: String.t(),
    ui: %{optional(String.t()) => any()}
  }
end
```

```elixir
defmodule Cfwf.Expr do
  defstruct [:parts, :ui]

  @type t() :: %__MODULE__{
    parts: [String.t() | Cfwf.Embed.t()],
    ui: %{optional(String.t()) => any()}
  }
end
```

```elixir
defmodule Cfwf.Trigger do
  defstruct [:id, :type, :name, :settings, :ui]

  @type id() :: integer()

  @type t() :: %__MODULE__{
    id: id(),
    type: Cfwf.NodeType.t(),
    name: String.t(),
    settings: %{
      optional(String.t()) => nil |
                              String.t() |
                              integer() |
                              boolean() |
                              Date.t() |
                              DateTime.t() |
                              Cfwf.Expr.t()
    },
    ui: %{optional(String.t()) => any()}
  }
end
```

```elixir
defmodule Cfwf.Node do
  defstruct [:id, :type, :name, :settings, :ui]

  @type id() :: integer()

  @type t() :: %__MODULE__{
    id: id(),
    type: Cfwf.NodeType.t(),
    name: String.t(),
    settings: %{
      optional(String.t()) => nil |
                              String.t() |
                              integer() |
                              boolean() |
                              Cfwf.Expr.t()
    },
    ui: %{optional(String.t()) => any()}
  }
end
```

```elixir
defmodule Cfwf.Edge do
  defstruct [:id, :from, :to, :label, :ui]

  @type id() :: integer()
  
  @type t() :: %__MODULE__{
    id: id(),
    from: Cfwf.Node.id() | Cfwf.Trigger.id(),
    to: Cfwf.Node.id(),

    # 用于 if/switch 节点
    label: nil | String.t(),

    ui: %{optional(String.t()) => any()}
  }
end
```

```elixir
defmodule Cfwf.Workflow do
  defstruct [:account_id, :id, :name, :triggers, :nodes, :edges, :ui]
  
  @type t() :: %__MODULE__{
    account_id: Cfwf.Account.id(),
    id: String.t(),
    name: String.t(),
    triggers: [Cfwf.Trigger.t()],
    nodes: [Cfwf.Node.t()],
    edges: [Cfwf.Edge.t()],
    ui: %{optional(String.t()) => any()}
  }
end
```
