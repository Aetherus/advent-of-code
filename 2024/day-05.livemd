# Advent of Code 2024 - Day 5

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.7"},
  {:libgraph, "~> 0.16.0"}
])
```

## Preparation

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiI1Iiwic2Vzc2lvbl9zZWNyZXQiOiJBT0NfU0VTU0lPTiIsInllYXIiOiIyMDI0In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "5", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
[section1, section2] = String.split(puzzle_input, "\n\n")
```

```elixir
graph =
  section1
  |> String.split(["|", "\n"])
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(2, 2)
  |> Enum.reduce(Graph.new(type: :directed), fn [a, b], graph ->
    Graph.add_edge(graph, a, b)
  end)
```

```elixir
updates =
  section2
  |> String.split("\n")
  |> Enum.map(fn line ->
    line
    |> String.split(",")
    |> Enum.map(&String.to_integer/1)
  end)
```

## Both Parts

```elixir
updates
|> Enum.map(fn pages ->
  graph
  |> Graph.subgraph(pages)
  |> Graph.topsort()
  |> then(& &1 -- &1 -- pages)
end)
|> Enum.zip(updates)
|> Enum.split_with(fn {sorted, orig} ->
  sorted == orig
end)
|> Tuple.to_list()
|> Enum.map(fn part ->
  part
  |> Enum.map(&elem(&1, 0))
  |> Enum.map(fn ls ->
    mid = div(length(ls), 2)
    Enum.at(ls, mid)
  end)
  |> Enum.sum()
end)
```

<!-- livebook:{"offset":1353,"stamp":{"token":"XCP.RPpShYAl63e6R4ajLIUHqa7YVFxxywNxn0VE-9pxrp2X7rZoeEtHEnwFGbJABQ17lTdNgf9qW48blgftsljZuFid1vU5IuHML4njnUT8k7n4JFQXCIM","version":2}} -->
