# Advent of Code - 2024 Day 9

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.7"},
  {:benchee, "~> 1.3"}
])
```

## Part 1

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiI5Iiwic2Vzc2lvbl9zZWNyZXQiOiJBT0NfU0VTU0lPTiIsInllYXIiOiIyMDI0In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "9", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
test_input = "2333133121414131402"
```

```elixir
defmodule Zipper do
  def from_list(list) do
    {[], list}
  end

  def next({_, []}) do
    nil
  end

  def next({prev, [h | t]}) do
    {[h | prev], t}
  end

  def prev({[], _}) do
    nil
  end

  def prev({[h | t], next}) do
    {t, [h | next]}
  end

  def get({_, []}) do
    nil
  end

  def get({_, [h | _]}) do
    h
  end

  def insert({prev, next}, val) do
    {prev, [val | next]}
  end
  
  def update({_, []}, _) do
    nil
  end

  def update({prev, [_ | t]}, val) do
    {prev, [val | t]}
  end

  def delete({_, []}) do
    nil
  end

  def delete({prev, [_ | t]}) do
    {prev, t}
  end

  def rewind({[], _} = zipper) do
    zipper
  end

  def rewind(zipper) do
    zipper
    |> prev()
    |> rewind()
  end

  def to_list(zipper) do
    zipper
    |> rewind()
    |> elem(1)
  end
end
```

```elixir
defmodule AoC2024.Day09 do
  def parse(input) do
    {files, spaces} =
      input
      |> :binary.bin_to_list()
      |> Stream.zip(Stream.cycle([:file, :space]))
      |> Stream.scan({nil, 0, 0}, fn {size, kind}, {_, prev_size, prev_pos} ->
        {kind, size - ?0, prev_size + prev_pos}
      end)
      |> Enum.split_with(fn {kind, _, _} ->
        kind == :file
      end)

    files =
      files
      |> Stream.with_index()
      |> Stream.map(fn {{:file, size, pos}, id} ->
        {:file, id, size, pos}
      end)
      |> Enum.reverse()

    spaces =
      spaces
      |> Stream.with_index()
      |> Enum.map(fn {{:space, size, pos}, id} ->
        {:space, id, size, pos}
      end)
      |> Zipper.from_list()

    {files, spaces}
  end

  def part_1(files, spaces) do
    disk = do_part_1(files, spaces, [])
    checksum(disk)
  end

  defp do_part_1([], _, acc) do
    acc
  end

  defp do_part_1([{:file, id, size, pos} = file | files], spaces, acc) do    
    case Zipper.get(spaces) do
      nil ->
        Enum.reverse([file | files], acc)

      {:space, _space_id, _space_size, space_pos} when space_pos > pos ->
        Enum.reverse([file | files], acc)

      {:space, _space_id, ^size, space_pos} ->
        spaces = spaces |> Zipper.delete()
        do_part_1(files, spaces, [{:file, id, size, space_pos} | acc])

      {:space, space_id, space_size, space_pos} when space_size > size ->
        spaces = spaces |> Zipper.update({:space, space_id, space_size - size, space_pos + size})
        do_part_1(files, spaces, [{:file, id, size, space_pos} | acc])

      {:space, _space_id, space_size, space_pos} ->
        spaces = spaces |> Zipper.delete()
        files = [{:file, id, size - space_size, pos} | files]
        moved = {:file, id, space_size, space_pos}
        do_part_1(files, spaces, [moved | acc])
    end
  end

  def part_2(files, spaces) do
    disk = do_part_2(files, spaces, [])
    checksum(disk)
  end

  defp do_part_2([], _spaces, acc) do
    acc
  end

  defp do_part_2([{:file, id, size, pos} = file | files], spaces, acc) do
    case get_and_update_space(spaces, size, pos) do
      {nil, spaces} ->
        do_part_2(files, spaces, [file | acc])

      {space_pos, spaces} ->
        do_part_2(files, spaces, [{:file, id, size, space_pos} | acc])
    end
  end

  defp get_and_update_space(spaces, size, pos) do
    case Zipper.get(spaces) do
      nil ->
        {nil, Zipper.rewind(spaces)}
        
      {:space, _id, _size, space_pos} when space_pos > pos ->
        {nil, Zipper.rewind(spaces)}
        
      {:space, _id, ^size, space_pos} ->
        spaces
        |> Zipper.delete()
        |> Zipper.rewind()
        |> then(&{space_pos, &1})
        
      {:space, id, space_size, space_pos} when space_size > size ->
        spaces
        |> Zipper.update({:space, id, space_size - size, space_pos + size})
        |> Zipper.rewind()
        |> then(&{space_pos, &1})

      _ ->
        spaces
        |> Zipper.next()
        |> get_and_update_space(size, pos)
    end
  end
  
  defp checksum(disk) do
    for {:file, id, size, pos} <- disk, reduce: 0 do
      sum -> sum + div((pos + pos + size - 1) * size * id, 2)
    end
  end
end
```

```elixir
{files, spaces} = AoC2024.Day09.parse(puzzle_input)
```

```elixir
AoC2024.Day09.part_1(files, spaces)
```

```elixir
AoC2024.Day09.part_2(files, spaces)
```

```elixir
Benchee.run(%{
  part_1: fn -> AoC2024.Day09.part_1(files, spaces) end,
  part_2: fn -> AoC2024.Day09.part_2(files, spaces) end
})
```

<!-- livebook:{"offset":4876,"stamp":{"token":"XCP.nC41pVuoQLC3uhjegl9HYGQq2rdAark-_qZZaJ0rQuJExP8XsIYZZDO2dby1DImeCyj1IiOOigdWHiJHtpw80mK2zes2CZRXmqGvjgBjL4aA7r0rnLc","version":2}} -->
